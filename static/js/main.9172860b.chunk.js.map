{"version":3,"sources":["Filter/filterData.js","Filter/search.js","Filter/index.js","Phonetic/index.js","Main/index.js","Missing/index.js","App.js","serviceWorker.js","index.js"],"names":["cnm","cnmFilter","tempStr","i","length","j","k","push","data","search","res","val","temp","slice","map","el","equal","Pinyin","splice","substring","console","log","replace","TextArea","Index","useState","content","setContent","createPinyin","className","style","width","color","onChange","e","currentTarget","value","handleInput","borderColor","dangerouslySetInnerHTML","__html","result","index","cn","key","App","setKey","href","mode","onClick","selectedKeys","theme","Item","to","type","path","exact","component","Main","Phonetic","Filter","Missing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9172860b.chunk.js","sourcesContent":["let cnm = [\"操槽草襙艹\", \"妮尼你匿\", \"嘛妈麻码骂\"];\nlet cnmFilter = [];\nlet tempStr = \"\";\n//对cnm数组进行类似排列操作\nfor (let i = 0; i < cnm[0].length; i++) {\n  for (let j = 0; j < cnm[1].length; j++) {\n    for (let k = 0; k < cnm[2].length; k++) {\n      tempStr = cnm[0][i] + cnm[1][j] + cnm[2][k];\n      cnmFilter.push(tempStr);\n    }\n  }\n}\nconst data = [...cnmFilter];\nexport { data };\n","import Pinyin from \"pinyin\";\nimport { data } from \"./filterData.js\";\nconst search = (res, val) => {\n  for (let i = 0; i < res.length; i++) {\n    for (let k = 0; k < data.length; k++) {\n      let temp = res.slice(i, i + data[k].length).map(el => {\n        //对数组中的每N个字符进行拆分\n        return el[0];\n      }); //切割拼音数组,使其变成和过滤数组一样长的一个个片段\n      let equal = false; //默认不相等\n      for (let j = 0; j < temp.length; j++) {\n        //对切割后的和应过滤的逐位比较\n        if (temp[j] === Pinyin(data[k])[j][0]) equal = true;\n        else equal = false;\n      }\n      if (equal) {\n        //相等的时候进行替换\n        res.splice(i, data[k].length, [\"*\"], [\"*\"], [\"*\"]);\n        let temp = val.substring(i, i + data[k].length);\n        console.log(temp);\n        val = val.replace(temp, \"***\");\n        console.log(val);\n      }\n    }\n  }\n  return [res, val];\n};\nexport default search;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Input } from \"antd\";\nimport \"../Phonetic/index.css\";\nimport Pinyin from \"pinyin\";\nimport search from \"./search\";\nconst { TextArea } = Input;\nexport default function Index() {\n  const [content, setContent] = useState(\"\");\n  const handleInput = e => {\n    let val = (function(e) {\n      let temp = e;\n      return temp;\n    })(e.currentTarget.value);\n    let res = Pinyin(e.currentTarget.value);\n    setContent(createPinyin(val, res));\n  };\n  const createPinyin = (val, res) => {\n    [res, val] = search(res, val);\n    // let result = \"\";\n    // for (let i in res) {\n    //   result += `<ruby style=\"word-break: break-all;white-space: normal;\"> ${val[i]}<rt>${res[i]}</rt>\n    //   </ruby>`;\n    // }\n    return val;\n  };\n  return (\n    <div>\n      <p>请输入需要过滤内容</p>\n      <div className=\"inputDiv\">\n        <TextArea\n          style={{ width: \"40%\", color: \"white\" }}\n          onChange={e => handleInput(e)}\n        ></TextArea>\n        <div\n          style={{ borderColor: \"pink\" }}\n          className=\"resultDiv\"\n          dangerouslySetInnerHTML={{ __html: content }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Input } from \"antd\";\nimport Pinyin from \"pinyin\";\nimport \"./index.css\";\nconst { TextArea } = Input;\nexport default function Index() {\n  const [content, setContent] = useState(\"\");\n  const handleInput = e => {\n    let val = e.currentTarget.value;\n    let res = Pinyin(e.currentTarget.value);\n    setContent(createPinyin(val, res));\n  };\n  const createPinyin = (val, res) => {\n    let result = \"\";\n    //添加符号处理,因为Pinyin方法会将多个符号占用一个位置\n    let symbolSet = /[,./<>?;':\"`~!@#$%^&*()_+-=\\\\|[\\]{} A-Za-z0-9，。、？·！——【】：；‘’“”]{2,}/g;\n    val = val.replace(symbolSet, \" \");\n    for (let i in res) {\n      result += `<ruby style=\"word-break: break-all;white-space: normal;\"> ${val[i]}<rt>${res[i][0]}</rt>\n        </ruby>`;\n    }\n    return result;\n  };\n  return (\n    <div>\n      <p>暂时只支持纯中文</p>\n      <div className=\"inputDiv\">\n        <TextArea\n          style={{ width: \"40%\", color: \"white\" }}\n          onChange={e => handleInput(e)}\n        ></TextArea>\n        <div\n          className=\"resultDiv\"\n          dangerouslySetInnerHTML={{ __html: content }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./index.css\";\nexport default function index() {\n  const classNameSet = [\n    \"child1\",\n    \"child2\",\n    \"child3\",\n    \"child4\",\n    \"child5\",\n    \"child6\",\n    \"child7\",\n    \"child8\",\n    \"child9\"\n  ];\n  return (\n    <div className=\"mainContent\">\n      <div className=\"parent\">\n        {classNameSet.map(cn => {\n          return <div className={cn} key={cn}></div>;\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function index() {\n  return <div>404</div>;\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport GitHubButton from \"react-github-btn\";\nimport Filter from \"./Filter\";\nimport Phonetic from \"./Phonetic\";\nimport Main from \"./Main\";\nimport Missing from \"./Missing\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport { Menu, Icon } from \"antd\";\nconst App = () => {\n  const [key, setKey] = useState(\"main\");\n  const handleClick = e => {\n    setKey(e.key);\n  };\n  const githubButtonInfo = {\n    href: \"https://github.com/giorgiopeng/handleChinese\",\n    \"datacolor-scheme\": \"no-preference: light; light: light; dark: dark;\",\n    \"data-size\": \"large\",\n    \"data-show-count\": \"true\",\n    \"aria-label\": \"Star giorgiopeng/handleChinese on GitHub\"\n  };\n  return (\n    <div>\n      <div className=\"githubButton\">\n        <GitHubButton {...githubButtonInfo}>Star</GitHubButton>\n      </div>\n      <Router>\n        <Menu\n          mode=\"horizontal\"\n          onClick={handleClick}\n          selectedKeys={key}\n          theme=\"dark\"\n        >\n          <Menu.Item key=\"main\">\n            <Link to=\"/\">\n              <Icon type=\"home\" />\n              首页\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"phonetic\">\n            <Link to=\"/Phonetic\">\n              <Icon type=\"file-text\" />\n              文本注音\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"filter\">\n            <Link to=\"/Filter\">\n              <Icon type=\"filter\" />\n              文本过滤\n            </Link>\n          </Menu.Item>\n        </Menu>\n        <Switch>\n          <Route path=\"/\" exact component={Main}></Route>\n          <Route path=\"/Phonetic\" component={Phonetic} />\n          <Route path=\"/Filter\" component={Filter} />\n          <Redirect to=\"/\"></Redirect>\n          <Route component={Missing} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}